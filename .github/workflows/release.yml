# .github/workflows/release.yml
name: Release EchoS3

# This workflow runs ONLY on pushes to the 'main' branch.
on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create Release and Update Tap
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and commit to the repo
      pull-requests: write # Needed to create pull requests in the tap repo

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch all history so that git-cliff can generate a changelog
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Generate Changelog
        id: changelog
        continue-on-error: true
        run: |
          echo "# Release Notes for v${{ steps.version.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes since last release:" >> RELEASE_NOTES.md
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD --pretty=format:"- %s" | grep -v "Merge" >> RELEASE_NOTES.md

      - name: Get next version
        id: version
        uses: reecetech/version-increment@2024.4.2
        with:
          scheme: semver
          increment: patch

      - name: Build Release Binaries
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.Version=${{ steps.version.outputs.version }}" -o echos3-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.Version=${{ steps.version.outputs.version }}" -o echos3-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Version=${{ steps.version.outputs.version }}" -o echos3-linux-amd64
          GOOS=windows GOARCH=amd64 go build -ldflags="-X main.Version=${{ steps.version.outputs.version }}" -o echos3-windows-amd64.exe

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.version }}'
          name: 'Release v${{ steps.version.outputs.version }}'
          body_path: 'RELEASE_NOTES.md'
          files: |
            echos3-darwin-amd64
            echos3-darwin-arm64
            echos3-linux-amd64
            echos3-windows-amd64.exe

      - name: Update Homebrew Tap
        id: update_tap
        if: success() && steps.create_release.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}
        run: |
          echo "Updating Homebrew tap with new version v${{ steps.version.outputs.version }}"
          
          # Create a temporary directory for our work
          TEMP_DIR=$(mktemp -d)
          echo "Working in temporary directory: $TEMP_DIR"
          
          # Set Git global configs for the commit
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Clone the tap repository
          echo "Cloning Homebrew tap repository..."
          if ! git clone https://x-access-token:${GITHUB_TOKEN}@github.com/jpwhite3/homebrew-echos3.git "$TEMP_DIR/homebrew-echos3"; then
            echo "::error::Failed to clone the Homebrew tap repository"
            exit 1
          fi
          
          cd "$TEMP_DIR/homebrew-echos3"
          
          # Calculate SHA256 checksums for the released binaries
          echo "Downloading release assets to calculate checksums..."
          mkdir -p tmp
          
          echo "Downloading AMD64 binary..."
          if ! curl -L -o tmp/echos3-darwin-amd64 https://github.com/jpwhite3/echos3/releases/download/v${{ steps.version.outputs.version }}/echos3-darwin-amd64; then
            echo "::error::Failed to download AMD64 binary"
            exit 1
          fi
          
          echo "Downloading ARM64 binary..."
          if ! curl -L -o tmp/echos3-darwin-arm64 https://github.com/jpwhite3/echos3/releases/download/v${{ steps.version.outputs.version }}/echos3-darwin-arm64; then
            echo "::error::Failed to download ARM64 binary"
            exit 1
          fi
          
          # Calculate checksums
          SHA_AMD64=$(shasum -a 256 tmp/echos3-darwin-amd64 | cut -d ' ' -f 1)
          SHA_ARM64=$(shasum -a 256 tmp/echos3-darwin-arm64 | cut -d ' ' -f 1)
          
          # Verify checksums are not empty
          if [ -z "$SHA_AMD64" ] || [ -z "$SHA_ARM64" ]; then
            echo "::error::Failed to calculate SHA256 checksums"
            exit 1
          fi
          
          echo "AMD64 SHA: $SHA_AMD64"
          echo "ARM64 SHA: $SHA_ARM64"
          
          # Update the formula file
          echo "Generating updated formula..."
          cat > echos3.rb << EOF
          class Echos3 < Formula
            desc "Watch local files and sync changes to S3 in real-time"
            homepage "https://github.com/jpwhite3/echos3"
            version "${{ steps.version.outputs.version }}"
            
            on_macos do
              if Hardware::CPU.intel?
                url "https://github.com/jpwhite3/echos3/releases/download/v${{ steps.version.outputs.version }}/echos3-darwin-amd64"
                sha256 "$SHA_AMD64"
              else
                url "https://github.com/jpwhite3/echos3/releases/download/v${{ steps.version.outputs.version }}/echos3-darwin-arm64"
                sha256 "$SHA_ARM64"
              end
            end
            
            def install
              bin.install stable.url.split("/").last => "echos3"
            end
            
            test do
              assert_match "echos3 version", shell_output("#{bin}/echos3 --version")
            end
          end
          EOF
          
          # Commit and push the changes
          echo "Committing and pushing changes..."
          git add echos3.rb
          git commit -m "chore: update echos3 formula to v${{ steps.version.outputs.version }}"
          
          if ! git push origin main; then
            echo "::error::Failed to push changes to the Homebrew tap repository"
            exit 1
          fi
          
          # Clean up
          echo "Cleaning up temporary files..."
          rm -rf "$TEMP_DIR"
          
          echo "Homebrew tap updated successfully!"
